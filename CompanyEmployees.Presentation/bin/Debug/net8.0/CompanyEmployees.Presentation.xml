<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CompanyEmployees.Presentation</name>
    </assembly>
    <members>
        <member name="T:CompanyEmployees.Presentation.Controllers.AuthenticationController">
            <summary>
            Handles authentication-related operations such as user registration and login.
            </summary>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.AuthenticationController.#ctor(Service.Contracts.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:CompanyEmployees.Presentation.Controllers.AuthenticationController"/> class.
            </summary>
            <param name="service">The service manager for handling authentication-related operations.</param>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.AuthenticationController.RegisterUser(Shared.DataTransferObjects.UserForRegistrationDto)">
            <summary>
            Registers a new user in the system.
            </summary>
            <param name="userForRegistration">The user registration data.</param>
            <returns>A status code indicating the result of the registration process.</returns>
            <response code="201">If the registration is successful.</response>
            <response code="400">If the registration fails due to validation errors.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.AuthenticationController.Authenticate(Shared.DataTransferObjects.UserForAuthenticationDto)">
            <summary>
            Authenticates a user and returns a JWT token if successful.
            </summary>
            <param name="user">The user authentication data.</param>
            <returns>A JWT token if the authentication is successful.</returns>
            <response code="200">If the authentication is successful and the token is created.</response>
            <response code="401">If the authentication fails due to invalid credentials.</response>
        </member>
        <member name="T:CompanyEmployees.Presentation.Controllers.CompaniesController">
            <summary>
            Handles CRUD operations for companies.
            </summary>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.CompaniesController.#ctor(Service.Contracts.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:CompanyEmployees.Presentation.Controllers.CompaniesController"/> class.
            </summary>
            <param name="service">The service manager for handling company-related operations.</param>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.CompaniesController.GetCompanies">
            <summary>
            Retrieves the list of all companies.
            </summary>
            <returns>List of companies.</returns>
            <response code="200">Returns the list of companies.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.CompaniesController.GetCompany(System.Guid)">
            <summary>
            Retrieves a company by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the company.</param>
            <returns>The company details.</returns>
            <response code="200">Returns the company with the specified ID.</response>
            <response code="404">If the company with the specified ID is not found.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.CompaniesController.CreateCompany(Shared.DataTransferObjects.CompanyForCreationDto)">
            <summary>
            Creates a new company.
            </summary>
            <param name="company">The company to be created.</param>
            <returns>The created company.</returns>
            <response code="201">Returns the newly created company.</response>
            <response code="400">If the company object is null.</response>
            <response code="422">If the model is invalid.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.CompaniesController.GetCompanyCollection(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Retrieves a collection of companies by their unique identifiers.
            </summary>
            <param name="ids">The unique identifiers of the companies.</param>
            <returns>A list of companies with the specified IDs.</returns>
            <response code="200">Returns the companies with the specified IDs.</response>
            <response code="404">If no companies with the specified IDs are found.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.CompaniesController.CreateCompanyCollection(System.Collections.Generic.IEnumerable{Shared.DataTransferObjects.CompanyForCreationDto})">
            <summary>
            Creates a collection of new companies.
            </summary>
            <param name="companyCollection">The collection of companies to be created.</param>
            <returns>The created companies.</returns>
            <response code="201">Returns the newly created companies.</response>
            <response code="400">If the company collection is null or empty.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.CompaniesController.DeleteCompany(System.Guid)">
            <summary>
            Deletes a company by its unique identifier.
            </summary>
            <param name="id">The unique identifier of the company to be deleted.</param>
            <returns>No content.</returns>
            <response code="204">If the company was successfully deleted.</response>
            <response code="404">If the company with the specified ID is not found.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.CompaniesController.UpdateCompany(System.Guid,Shared.DataTransferObjects.CompanyForUpdateDto)">
            <summary>
            Updates an existing company.
            </summary>
            <param name="id">The unique identifier of the company to be updated.</param>
            <param name="company">The updated company details.</param>
            <returns>No content.</returns>
            <response code="204">If the company was successfully updated.</response>
            <response code="400">If the company object is null.</response>
            <response code="422">If the model is invalid.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.CompaniesController.GetCompaniesOptions">
            <summary>
            Provides options for the available HTTP methods.
            </summary>
            <returns>HTTP options.</returns>
        </member>
        <member name="T:CompanyEmployees.Presentation.Controllers.EmployeesController">
            <summary>
            Handles CRUD operations for employees within a specific company.
            </summary>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.EmployeesController.#ctor(Service.Contracts.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:CompanyEmployees.Presentation.Controllers.EmployeesController"/> class.
            </summary>
            <param name="service">The service manager for handling employee-related operations.</param>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.EmployeesController.GetEmployeesForCompany(System.Guid,Shared.RequestFeatures.EmployeeParameters)">
            <summary>
            Retrieves a list of employees for a specific company.
            </summary>
            <param name="companyId">The unique identifier of the company.</param>
            <param name="employeeParameters">The parameters for employee query (pagination, filtering, etc.).</param>
            <returns>A paginated list of employees for the specified company.</returns>
            <response code="200">Returns the list of employees for the company.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.EmployeesController.GetEmployeeForCompany(System.Guid,System.Guid)">
            <summary>
            Retrieves an employee by their unique identifier within a specific company.
            </summary>
            <param name="companyId">The unique identifier of the company.</param>
            <param name="id">The unique identifier of the employee.</param>
            <returns>The details of the employee.</returns>
            <response code="200">Returns the employee details.</response>
            <response code="404">If the employee with the specified ID is not found.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.EmployeesController.CreateEmployeeForCompany(System.Guid,Shared.DataTransferObjects.EmployeeForCreationDto)">
            <summary>
            Creates a new employee for a specific company.
            </summary>
            <param name="companyId">The unique identifier of the company.</param>
            <param name="employee">The employee data to be created.</param>
            <returns>The newly created employee.</returns>
            <response code="201">Returns the created employee.</response>
            <response code="400">If the employee object is null.</response>
            <response code="422">If the model is invalid.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.EmployeesController.DeleteEmployeeForCompany(System.Guid,System.Guid)">
            <summary>
            Deletes an employee from a specific company.
            </summary>
            <param name="companyId">The unique identifier of the company.</param>
            <param name="id">The unique identifier of the employee to be deleted.</param>
            <returns>No content.</returns>
            <response code="204">If the employee was successfully deleted.</response>
            <response code="404">If the employee with the specified ID is not found.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.EmployeesController.UpdateEmployeeForCompany(System.Guid,System.Guid,Shared.DataTransferObjects.EmployeeForUpdateDto)">
            <summary>
            Updates an existing employee in a specific company.
            </summary>
            <param name="companyId">The unique identifier of the company.</param>
            <param name="id">The unique identifier of the employee to be updated.</param>
            <param name="employee">The updated employee data.</param>
            <returns>No content.</returns>
            <response code="204">If the employee was successfully updated.</response>
            <response code="400">If the employee object is null.</response>
            <response code="422">If the model is invalid.</response>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.EmployeesController.PartiallyUpdateEmployeeForCompany(System.Guid,System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{Shared.DataTransferObjects.EmployeeForUpdateDto})">
            <summary>
            Partially updates an existing employee in a specific company using JSON Patch.
            </summary>
            <param name="companyId">The unique identifier of the company.</param>
            <param name="id">The unique identifier of the employee to be partially updated.</param>
            <param name="patchDoc">The JSON Patch document containing the updates.</param>
            <returns>No content.</returns>
            <response code="204">If the employee was successfully partially updated.</response>
            <response code="400">If the patch document is null.</response>
            <response code="422">If the model is invalid after applying the patch.</response>
        </member>
        <member name="T:CompanyEmployees.Presentation.Controllers.TokenController">
            <summary>
            Handles operations related to token management such as refreshing tokens.
            </summary>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.TokenController.#ctor(Service.Contracts.IServiceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:CompanyEmployees.Presentation.Controllers.TokenController"/> class.
            </summary>
            <param name="services">The service manager for handling token-related operations.</param>
        </member>
        <member name="M:CompanyEmployees.Presentation.Controllers.TokenController.Refresh(Shared.DataTransferObjects.TokenDto)">
            <summary>
            Refreshes an existing JWT token.
            </summary>
            <param name="tokenDto">The token data transfer object containing the refresh token.</param>
            <returns>A new JWT token if the refresh is successful.</returns>
            <response code="200">If the token refresh is successful and a new token is returned.</response>
            <response code="400">If the refresh token is invalid or expired.</response>
        </member>
    </members>
</doc>
